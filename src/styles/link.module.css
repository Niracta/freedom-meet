/* More or less we're defining types for our custom
 * css properties with this code block. It only works
 * in modern browsers that support CSS Houdini, but
 * for development it's useful for preventing bugs
 */
@layer properties {
  @property --gradient-alpha {
    syntax: "<number>";
    inherits: true;
    initial-value: 0;
  }
  @property --overlay-alpha {
    syntax: "<number>";
    inherits: true;
    initial-value: 0;
  }
  @property --mouse-x {
    syntax: "<number>";
    inherits: true;
    initial-value: 0;
  }
  @property --mouse-y {
    syntax: "<number>";
    inherits: true;
    initial-value: 0;
  }
  @property --timing {
    syntax: "<number>";
    inherits: true;
    initial-value: 0;
  }
  @property --rotation {
    syntax: "<angle>";
    inherits: false;
    initial-value: 0deg;
  }
}

.frame {
  all: unset;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  width: -webkit-fill-available;
  height: fit-content;
  padding-inline: 2.4rem;
}

.link {
  --fg-alpha: 0.75;
  --bd-color: transparent;
  --bg-alpha: 0.35;
  --color-red: color(display-p3 0.95 0.06 0.02 / var(--gradient-alpha));
  --color-orange: color(display-p3 0.97 0.61 0.07 / var(--gradient-alpha));
  --color-olive: color(display-p3 0.83 0.87 0.04 / var(--gradient-alpha));
  --color-lime: color(display-p3 0.31 0.89 0.05 / var(--gradient-alpha));
  --color-sage: color(display-p3 0.12 0.88 0.88 / var(--gradient-alpha));
  --color-teal: color(display-p3 0.15 0.8 0.93 / var(--gradient-alpha));
  --color-blue: color(display-p3 0.14 0.47 0.99 / var(--gradient-alpha));
  --color-purple: color(display-p3 0.38 0.14 0.99 / var(--gradient-alpha));
  --color-violet: color(display-p3 0.73 0.04 0.94 / var(--gradient-alpha));
  --color-pink: color(display-p3 0.93 0.03 0.85 / var(--gradient-alpha));
  --timing: 0.3s;
  --transitions: --mouse-y 0.075s linear, --mouse-x 0.075s linear,
    --gradient-alpha var(--timing) ease, --overlay-alpha var(--timing) ease,
    opacity var(--timing) ease, box-shadow var(--timing) ease,
    background-image var(--timing) ease;

  @supports not (color: color(display-p3 0.93 0.03 0.85)) {
    --color-red: hsl(3 93% 48% / var(--gradient-alpha));
    --color-orange: hsl(26 91% 52% / var(--gradient-alpha));
    --color-olive: hsl(65 89% 46% / var(--gradient-alpha));
    --color-lime: hsl(122 86% 48% / var(--gradient-alpha));
    --color-sage: hsl(181 78% 50% / var(--gradient-alpha));
    --color-teal: hsl(193 76% 53% / var(--gradient-alpha));
    --color-blue: hsl(219 95% 56% / var(--gradient-alpha));
    --color-purple: hsl(269 95% 56% / var(--gradient-alpha));
    --color-violet: hsl(292 93% 47% / var(--gradient-alpha));
    --color-pink: hsl(327 96% 47% / var(--gradient-alpha));
  }

  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  border: 0.2rem solid var(--bd-color);
  border-radius: 0.8rem;
  color: rgba(244, 244, 245, var(--fg-alpha));
  transition: var(--transitions);
  animation: rotating 3s linear infinite;
  box-sizing: border-box;
  mix-blend-mode: screen;
  cursor: pointer;
  overflow: hidden;

  &::before {
    content: "";
    z-index: -1;
    position: absolute;
    inset: 2px;
    border-radius: 0.6rem;
    background-color: rgba(230, 230, 230, var(--bg-alpha));
    backdrop-filter: blur(5px);
  }

  &::after {
    content: "";
    position: absolute;
    display: block;
    width: 180%;
    height: 180%;
    background-image: conic-gradient(
      from var(--rotation),
      var(--color-red) 0%,
      var(--color-orange) 10%,
      var(--color-olive) 20%,
      var(--color-lime) 30%,
      var(--color-teal) 40%,
      var(--color-sage) 50%,
      var(--color-blue) 60%,
      var(--color-purple) 70%,
      var(--color-violet) 80%,
      var(--color-pink) 90%,
      var(--color-red) 100%
    );
    pointer-events: none;
    transition: var(--transitions);
    animation: rotating 3s linear infinite;
    filter: saturate(2) blur(5px);
    transform: translate(
      calc(calc(var(--mouse-x) / 1.5) * 1px),
      calc(calc(var(--mouse-y) / 1.5) * -1px)
    );
    opacity: calc(var(--overlay-alpha) / 3);
  }

  &:not(:disabled) {
    &:hover,
    &:focus {
      --fg-alpha: 1;
      --bd-color: rgba(255, 255, 255, 0.6);
      --bg-alpha: 0.5;
      --overlay-alpha: 0.7;
      --gradient-alpha: 0.35;

      transition: var(--transitions);
    }
  }

  &:focus {
    outline: none;
  }

  &:not(:hover, :focus) {
    --mouse-y: 0;
    --mouse-x: 0;
    --gradient-alpha: 0;
  }
}

.inner {
  display: flex;
  align-items: center;
  gap: 1.6rem;
  width: 100%;
  padding-inline: 1.6rem;
  padding-block: 0.8rem;
  border-radius: 0.7rem;
  font-size: 3.6rem;
  font-weight: 600;
  letter-spacing: calc((10 / 100) * 1em);
  text-transform: uppercase;

  svg {
    width: 2.4rem;
    height: 2.4rem;
  }
}

@keyframes rotating {
  0% {
    --rotation: 0deg;
  }
  100% {
    --rotation: 360deg;
  }
}
